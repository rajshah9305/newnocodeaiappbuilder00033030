# Contributing to AppGenius AI Builder

We love your input! We want to make contributing to AppGenius AI Builder as easy and transparent as possible, whether it's:

- Reporting a bug
- Discussing the current state of the code
- Submitting a fix
- Proposing new features
- Becoming a maintainer

## 🚀 Quick Start for Contributors

### Prerequisites
- Node.js 18.17+ 
- PostgreSQL database
- Git
- A Cerebras AI API key for testing

### Development Setup

1. **Fork and Clone**
   ```bash
   git clone https://github.com/your-username/appgenius-ai-builder.git
   cd appgenius-ai-builder
   ```

2. **Install Dependencies**
   ```bash
   npm install
   ```

3. **Environment Setup**
   ```bash
   cp .env.example .env.local
   # Fill in your environment variables
   ```

4. **Database Setup**
   ```bash
   npx prisma generate
   npx prisma db push
   npm run db:seed
   ```

5. **Start Development**
   ```bash
   npm run dev
   ```

## 🛠️ Development Process

We use [GitHub Flow](https://docs.github.com/en/get-started/quickstart/github-flow), so all code changes happen through pull requests.

### 1. Create a Branch
```bash
git checkout -b feature/your-feature-name
# or
git checkout -b fix/your-bug-fix
```

### 2. Make Your Changes
- Write clean, readable code
- Follow our coding standards
- Add tests for new features
- Update documentation as needed

### 3. Test Your Changes
```bash
# Run linting
npm run lint

# Run type checking
npm run type-check

# Run tests
npm run test

# Build the application
npm run build
```

### 4. Commit Your Changes
We follow [Conventional Commits](https://www.conventionalcommits.org/):

```bash
git commit -m "feat: add new agent for code review"
git commit -m "fix: resolve authentication redirect issue"
git commit -m "docs: update API documentation"
```

### 5. Push and Create PR
```bash
git push origin feature/your-feature-name
```

Then create a pull request through GitHub.

## 📝 Coding Standards

### TypeScript
- Use TypeScript for all new code
- No `any` types (use `unknown` if needed)
- Proper interface definitions
- Export types from appropriate files

### React
- Functional components with hooks
- Custom hooks for reusable logic
- Proper error boundaries
- Accessibility considerations

### Styling
- Use Tailwind CSS utility classes
- Follow mobile-first responsive design
- Consistent spacing (4px grid system)
- Use design tokens for colors

### API Design
- RESTful endpoints where appropriate
- Proper HTTP status codes
- Consistent error response format
- Input validation with Zod
- OpenAPI documentation

### Database
- Descriptive migration names
- Proper indexing
- Foreign key constraints
- Seed data for development

## 🧪 Testing Guidelines

### Unit Tests
```typescript
// Example unit test
import { render, screen } from '@testing-library/react';
import { Button } from '@/components/ui/Button';

test('renders button with correct text', () => {
  render(<Button>Click me</Button>);
  expect(screen.getByText('Click me')).toBeInTheDocument();
});
```

### Integration Tests
```typescript
// Example API test
import { POST } from '@/app/api/projects/route';
import { NextRequest } from 'next/server';

test('creates new project', async () => {
  const request = new NextRequest('http://localhost:3000/api/projects', {
    method: 'POST',
    body: JSON.stringify({
      name: 'Test Project',
      description: 'Test Description'
    })
  });
  
  const response = await POST(request);
  expect(response.status).toBe(201);
});
```

### E2E Tests
```typescript
// Example Playwright test
import { test, expect } from '@playwright/test';

test('user can create project', async ({ page }) => {
  await page.goto('/');
  await page.click('[data-testid="new-project-button"]');
  await page.fill('[data-testid="project-name"]', 'My Test Project');
  await page.click('[data-testid="create-button"]');
  
  await expect(page.locator('text=My Test Project')).toBeVisible();
});
```

## 📚 Documentation

### Code Documentation
- JSDoc comments for complex functions
- README updates for new features
- API documentation updates
- Component prop documentation

### Commit Messages
Use conventional commit format:
- `feat:` new features
- `fix:` bug fixes
- `docs:` documentation changes
- `style:` formatting changes
- `refactor:` code refactoring
- `test:` adding tests
- `chore:` maintenance tasks

## 🐛 Bug Reports

Great bug reports tend to have:

- A quick summary and/or background
- Steps to reproduce
  - Be specific!
  - Give sample code if you can
- What you expected would happen
- What actually happens
- Notes (possibly including why you think this might be happening)

### Bug Report Template
```markdown
**Bug Description**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected Behavior**
A clear description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Environment:**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Additional Context**
Add any other context about the problem here.
```

## 💡 Feature Requests

We love feature requests! Please provide:

- **Problem**: What problem does this solve?
- **Solution**: Your proposed solution
- **Alternatives**: Alternative solutions considered
- **Additional Context**: Any other relevant information

### Feature Request Template
```markdown
**Is your feature request related to a problem?**
A clear description of what the problem is.

**Describe the solution you'd like**
A clear description of what you want to happen.

**Describe alternatives you've considered**
Any alternative solutions you've considered.

**Additional context**
Screenshots, mockups, or additional context.
```

## 🏗️ Project Structure

```
appgenius-ai-builder/
├── app/                    # Next.js app directory
│   ├── (auth)/            # Auth routes
│   ├── api/               # API endpoints
│   ├── globals.css        # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Home page
├── components/            # React components
│   ├── ui/               # Reusable UI components
│   └── ...               # Feature components
├── lib/                  # Utility libraries
├── prisma/              # Database schema
├── public/              # Static assets
├── types/               # TypeScript definitions
└── ...                  # Config files
```

## 🎯 Areas for Contribution

### High Priority
- AI agent improvements and new agents
- Performance optimizations
- Security enhancements
- Test coverage improvements
- Documentation updates

### Medium Priority
- New templates
- UI/UX improvements
- Analytics features
- Integration with new AI services
- Mobile app development

### Good First Issues
- Bug fixes
- Documentation improvements
- Test additions
- Accessibility improvements
- Code cleanup and refactoring

Look for issues tagged with `good-first-issue` or `help-wanted`.

## 🤝 Code of Conduct

### Our Pledge
We are committed to making participation in our project a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.

### Our Standards
Examples of behavior that contributes to creating a positive environment include:
- Using welcoming and inclusive language
- Being respectful of differing viewpoints and experiences
- Gracefully accepting constructive criticism
- Focusing on what is best for the community
- Showing empathy towards other community members

### Enforcement
Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at conduct@appgenius.ai. The project team will review and investigate all complaints.

## 📞 Getting Help

- **Discord**: [Join our community](https://discord.gg/appgenius)
- **GitHub Issues**: For bug reports and feature requests
- **Discussions**: For questions and general discussion
- **Email**: support@appgenius.ai for private matters

## 🏆 Recognition

Contributors who make significant improvements will be:
- Added to the README contributors section
- Mentioned in release notes
- Invited to join the maintainer team (for consistent contributors)

## 📄 License

By contributing, you agree that your contributions will be licensed under the MIT License.

---

Thank you for contributing to AppGenius AI Builder! 🚀✨